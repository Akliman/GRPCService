// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/grpc/protos/kvstorage.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvStorageServiceClient is the client API for KvStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvStorageServiceClient interface {
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValResponce, error)
	Put(ctx context.Context, in *KeyValRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Empty, error)
}

type kvStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKvStorageServiceClient(cc grpc.ClientConnInterface) KvStorageServiceClient {
	return &kvStorageServiceClient{cc}
}

func (c *kvStorageServiceClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValResponce, error) {
	out := new(ValResponce)
	err := c.cc.Invoke(ctx, "/protos.KvStorageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStorageServiceClient) Put(ctx context.Context, in *KeyValRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.KvStorageService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvStorageServiceClient) Delete(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.KvStorageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvStorageServiceServer is the server API for KvStorageService service.
// All implementations must embed UnimplementedKvStorageServiceServer
// for forward compatibility
type KvStorageServiceServer interface {
	Get(context.Context, *KeyRequest) (*ValResponce, error)
	Put(context.Context, *KeyValRequest) (*Empty, error)
	Delete(context.Context, *KeyRequest) (*Empty, error)
	mustEmbedUnimplementedKvStorageServiceServer()
}

// UnimplementedKvStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKvStorageServiceServer struct {
}

func (UnimplementedKvStorageServiceServer) Get(context.Context, *KeyRequest) (*ValResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKvStorageServiceServer) Put(context.Context, *KeyValRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKvStorageServiceServer) Delete(context.Context, *KeyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKvStorageServiceServer) mustEmbedUnimplementedKvStorageServiceServer() {}

// UnsafeKvStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvStorageServiceServer will
// result in compilation errors.
type UnsafeKvStorageServiceServer interface {
	mustEmbedUnimplementedKvStorageServiceServer()
}

func RegisterKvStorageServiceServer(s grpc.ServiceRegistrar, srv KvStorageServiceServer) {
	s.RegisterService(&KvStorageService_ServiceDesc, srv)
}

func _KvStorageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStorageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.KvStorageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStorageServiceServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStorageService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStorageServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.KvStorageService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStorageServiceServer).Put(ctx, req.(*KeyValRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvStorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvStorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.KvStorageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvStorageServiceServer).Delete(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KvStorageService_ServiceDesc is the grpc.ServiceDesc for KvStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.KvStorageService",
	HandlerType: (*KvStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KvStorageService_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _KvStorageService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KvStorageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/protos/kvstorage.proto",
}
